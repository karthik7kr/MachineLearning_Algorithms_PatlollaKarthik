# -*- coding: utf-8 -*-
"""5_Random-Forest_Parth-Gupta

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kylF8Q_cmKjqsFjmcC_QAIX8ejhK0yVv

### Random Forest (Wine Dataset)
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_wine      # Loads the built-in Wine dataset (multiclass)
from sklearn.ensemble import RandomForestClassifier # Random Forest classifier
from sklearn.model_selection import train_test_split # For train/test splitting
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report # For evaluation

wine = load_wine()
X = wine.data
y = wine.target

# converting loaded dataset into dataframe to get info (as load_wine is loaded dataset, it is not possible to use pandas library on it)
df = pd.DataFrame(X, columns=wine.feature_names)
df['target'] = y
df['target_name'] = df['target'].map(dict(enumerate(wine.target_names)))

print(df.head())

df.info()

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(
    X, y,
    test_size=0.3,                  # 30% test and 70% train
    random_state=42,
    stratify=y
)
print(f"Training samples: {X_train.shape[0]}, Test samples: {X_test.shape[0]}")

# train the Random Forest classifier
clf = RandomForestClassifier(
    n_estimators=100,
    random_state=42
)
clf.fit(X_train, y_train)

# predictions on the test set
y_pred = clf.predict(X_test)

print("=== Model Evaluation ===")
accuracy = accuracy_score(y_test, y_pred)
print(f"Test set accuracy: {accuracy:.2f}")

print("\nClassification Report:")
print(classification_report(
    y_test, y_pred, target_names=wine.target_names
))

print("Training accuracy:", clf.score(X_train, y_train))
print("Testing accuracy:", clf.score(X_test, y_test))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(7, 5))
sns.heatmap(
    conf_matrix, annot=True, fmt='d', cmap='Oranges',
    xticklabels=wine.target_names, yticklabels=wine.target_names
)
plt.title("Confusion Matrix - Random Forest on Wine Dataset")
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.tight_layout()
plt.show()

# Feature importance plot - most suitable for Random Forests
importances = clf.feature_importances_
indices = np.argsort(importances)[::-1]     # Sort features by importance (descending)

plt.figure(figsize=(10, 6))
plt.title("Feature Importances (Random Forest)")
plt.bar(range(X.shape[1]), importances[indices], align='center')
plt.xticks(range(X.shape[1]), [wine.feature_names[i] for i in indices], rotation=45, ha='right')
plt.ylabel("Importance Score")
plt.tight_layout()
plt.show()

print("\n=== Top 5 Important Features ===")
for idx in indices[:5]:
    print(f"{wine.feature_names[idx]}: {importances[idx]:.3f}")

# Predict and inspect a sample
sample = X_test[0].reshape(1, -1)
sample_pred = clf.predict(sample)
print("=== Example Sample Prediction ===")
print(f"Actual class: {wine.target_names[y_test[0]]}")
print(f"Predicted class: {wine.target_names[sample_pred[0]]}")