# -*- coding: utf-8 -*-
"""4_SVM_Parth-Gupta

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1noNKqswyj59G-Fx-gl-YoEJRBVXf5chM

### SVM (Breast Cancer Dataset)
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_breast_cancer  # Loads the built-in breast cancer classification dataset
from sklearn.svm import SVC                    # Support Vector Classifier (SVM for classification)
from sklearn.model_selection import train_test_split # For splitting dataset into train/test sets
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report # valuation metrics
from sklearn.preprocessing import StandardScaler     # For standardizing the features

# converting loaded dataset into dataframe to get info
cancer = load_breast_cancer()

df = pd.DataFrame(
    data=cancer.data,
    columns=cancer.feature_names
)
df['target'] = cancer.target
df['target_name'] = df['target'].map({0: 'malignant', 1: 'benign'})

print(df.head())

df.info()

data = load_breast_cancer()
X = data.data
y = data.target
print("=== Breast Cancer Dataset Overview ===")
print(f"Feature names: {list(data.feature_names)[:5]} ...")  # Show a sample of feature names
print(f"Shape of feature matrix: {X.shape}")                 # Number of samples, number of features
print(f"Class distribution (0=malignant, 1=benign): {np.bincount(y)}")
print()

# Standardising the data
scaler = StandardScaler()                      # SVM is sensitive to feature scale; this improves accuracy and speed
X_scaled = scaler.fit_transform(X)

# training and test sets (70% train, 30% test)
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y,
    test_size=0.3,
    random_state=42,
    stratify=y
)
print(f"Training samples: {X_train.shape[0]}, Test samples: {X_test.shape[0]}")

clf = SVC()
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)                # Test set predictions

# SVM score
accuracy = accuracy_score(y_test, y_pred)     # correct predictions
print("=== Model Evaluation ===")
print(f"Test set accuracy: {accuracy:.2f}")

print("\nClassification Report:")
print(classification_report(
    y_test, y_pred,
    target_names=data.target_names
))

# the confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(
    conf_matrix, annot=True, fmt='d', cmap='Reds',
    xticklabels=data.target_names,
    yticklabels=data.target_names
)
plt.title("Confusion Matrix (SVM on Breast Cancer)")
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.tight_layout()
plt.show()

# Sample prediction
sample = X_test[0].reshape(1, -1)
sample_pred = clf.predict(sample)
print("=== Sample Prediction ===")
print(f"Input (scaled): {X_test[0][:5]} ...")
print(f"Actual class: {data.target_names[y_test[0]]}, Predicted: {data.target_names[sample_pred[0]]}")