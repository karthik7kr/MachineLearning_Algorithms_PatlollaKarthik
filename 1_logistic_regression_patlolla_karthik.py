# -*- coding: utf-8 -*-
"""1_Logistic-Regression_Parth Gupta

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13TpA2auJVEg8uQJDrd_Ts2wnEV_OEdBh

### LOGISTIC REGRESSION (IRIS DATASET)
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import (accuracy_score, confusion_matrix, classification_report)

iris = load_iris()
X = iris.data  # Features: sepal length, sepal width, petal length, petal width
y = iris.target  # Labels: 0 = setosa, 1 = versicolor, 2 = virginica

print("=== Iris Dataset Overview ===")
print(f"Feature names: {iris.feature_names}")
print(f"Target names: {iris.target_names}")
print(f"Dataset shape: {X.shape}")
print()

# Create a pandas DataFrame from the iris data
iris_df = pd.DataFrame(data=np.c_[iris.data, iris.target],
                       columns=iris.feature_names + ['target'])

# Map the target integers to species names
iris_df['species'] = iris_df['target'].map({i: name for i, name in enumerate(iris.target_names)})

display(iris_df.head())

# Create a violin plot for sepal length grouped by species
plt.figure(figsize=(10, 6))
sns.violinplot(
    x='species',
    y='sepal length (cm)',
    data=iris_df,
    palette='Set2'
)

plt.title('Violin Plot of Sepal Length by Species')
plt.xlabel('Species')
plt.ylabel('Sepal Length (cm)')
plt.show()

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3,    # test_size=0.3 means 30% test, 70% train
    random_state=42,        # Ensures same split every run (reproducibility)
    stratify=y              # Ensures class distribution is balanced in train and test splits
)

clf = LogisticRegression(max_iter=200) # Use logistic regression
clf.fit(X_train, y_train)              # Train the model

y_pred = clf.predict(X_test)           # Model predicts labels for test data

print("=== Model Evaluation ===")
accuracy = accuracy_score(y_test, y_pred)        # Calculate accuracy (fraction of correct predictions)
print(f"Accuracy on test set: {accuracy:.2f}")   # Print with 2 decimals

print(f"Training accuracy: {model.score(X_train, y_train):.2f}")
print(f"Testing accuracy: {model.score(X_test, y_test):.2f}")

print("Classification Report:")
print(classification_report(
    y_test, y_pred, target_names=iris.target_names)) # Show precision, recall, f1 per class

# Precision (per class): It measures how many of the predicted samples for a specific class are actually correct
# Recall (per class): It measures how many of the actual samples of a class the model correctly identified
# F1 Score (per class): It combines precision and recall into a single score by taking their harmonic mean

conf_matrix = confusion_matrix(y_test, y_pred)   # Shows number of correct/incorrect predictions per class
sns.heatmap(
    conf_matrix, annot=True, cmap='Blues', fmt='d',
    xticklabels=iris.target_names, yticklabels=iris.target_names) # Heatmap for easy visualization
plt.title("Confusion Matrix")  # Chart title
plt.xlabel("Predicted Label")  # X-axis label
plt.ylabel("True Label")       # Y-axis label
plt.tight_layout()             # Prevents label overlap
plt.show()                     # Displays the plot

print("Model Coefficients:")
for i, class_label in enumerate(iris.target_names):
    print(f"{class_label}: {clf.coef_[i]}") # Shows which features matter for each class (interpret model's learned weights)

print("Model Intercepts:")
print(clf.intercept_)              # Shows model bias terms (one per class)

sample = np.array([[5.1, 3.5, 1.4, 0.2]])         # Example flower (setosa-like); values from first entry in iris dataset
sample_pred = clf.predict(sample)               # Predict class for the new sample
print("=== Sample Prediction ===")
print(f"Input: {sample.tolist()}")                # Display sample features
print(f"Predicted class: {iris.target_names[sample_pred[0]]}")   # Print predicted class