# -*- coding: utf-8 -*-
"""3_KNN_Parth-Gupta

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fdUWQBAMsg669HHHWHpch37LSgCHQPzA

### KNN (Digits dataset)
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_digits  # Loads the digits (handwritten numbers) dataset
from sklearn.neighbors import KNeighborsClassifier # KNN model for classification
from sklearn.model_selection import train_test_split # For splitting dataset
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report # evaluation metrics

digits = load_digits()
X = digits.data
y = digits.target

print("=== Digits Dataset Overview ===")
print(f"Number of samples: {X.shape[0]}")
print(f"Number of features: {X.shape[1]}")
print(f"Number of classes: {len(np.unique(y))}")
print()

# Spliting data into train and test
X_train, X_test, y_train, y_test = train_test_split(
    X, y,
    test_size=0.3,                      # 30% test, 70% train
    random_state=42,
    stratify=y
)
print(f"Training samples: {X_train.shape[0]}, Test samples: {X_test.shape[0]}")

clf = KNeighborsClassifier(n_neighbors=3) # 3-NN is a common default
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)              # Predict the digit class for each test image

accuracy = accuracy_score(y_test, y_pred)     # KNN Score
print("=== Model Evaluation ===")
print(f"Accuracy on test set: {accuracy:.2f}")

print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=[str(num) for num in digits.target_names])) # Shows precision, recall, F1 score per digit class

# confusion matrix for visualization
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Purples',
            xticklabels=digits.target_names, yticklabels=digits.target_names)
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix - K-Nearest Neighbors on Digits Dataset')
plt.tight_layout()
plt.show()

# A sample visualisation
plt.figure(figsize=(4, 4))
plt.imshow(X_test[0].reshape(8, 8), cmap='gray_r')   # Reshape flat vector to 8x8 image for display
plt.title(f'True label: {y_test[0]}, Predicted: {y_pred[0]}')
plt.axis('off')
plt.show()